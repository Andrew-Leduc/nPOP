ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
ribo
dist_tmt <- Distance_cor(as.matrix(t7_ribo),10)
dist_plex <- Distance_cor(as.matrix(ribo_plex),10)
null_TMT_plusdat <-null_TMT
null_TMT_plusdat$cond <- 'NULL'
dist_tmt$cond <- 'F1F0-ATP synthase, mitochondrial'
null_TMT_plusdat <- rbind(null_TMT_plusdat,dist_tmt)
null_plex_plusdat <-null_plex
null_plex_plusdat$cond <- 'NULL'
dist_plex$cond <- 'F1F0-ATP synthase, mitochondrial'
null_plex_plusdat <- rbind(null_plex_plusdat,dist_plex)
ggplot(null_plex_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3) + ggtitle('plexDIA SC')+xlab('Correlations')
ggplot(null_TMT_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3)+ggtitle('nPOP SC (subset same cell# and inersected proteins with plex)') + xlab('Correlations')
ribo <- comps %>% filter(ComplexName == 'C complex spliceosome')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
dist_tmt <- Distance_cor(as.matrix(t7_ribo),10)
dist_plex <- Distance_cor(as.matrix(ribo_plex),10)
null_TMT <- Distance_cor(as.matrix(t7_ribo),10)
null_plex <- Distance_cor(as.matrix(stuff),10)
null_TMT <- Distance_cor(as.matrix(t7_ribo),10)
t7_ribo <- t7[,sample(colnames(t7),144)]
null_TMT <- Distance_cor(as.matrix(t7_ribo),10)
runApp('~/Downloads/DO-MS-master')
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
null_TMT <- Distance_cor(as.matrix(t7_ribo),10)
null_plex <- Distance_cor(as.matrix(stuff),10)
t7_ribo <- t7[,sample(colnames(t7),144)]
null_TMT <- Distance_cor(as.matrix(t7_ribo),10)
null_TMT <- Distance_cor(as.matrix(t7_ribo),10)
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
dist_tmt <- Distance_cor(as.matrix(t7_ribo),10)
dist_plex <- Distance_cor(as.matrix(ribo_plex),10)
null_TMT_plusdat <-null_TMT
null_TMT_plusdat$cond <- 'NULL'
dist_tmt$cond <- 'C complex spliceosome'
null_TMT_plusdat <- rbind(null_TMT_plusdat,dist_tmt)
null_plex_plusdat <-null_plex
null_plex_plusdat$cond <- 'NULL'
dist_plex$cond <- 'C complex spliceosome'
null_plex_plusdat <- rbind(null_plex_plusdat,dist_plex)
ggplot(null_plex_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3) + ggtitle('plexDIA SC')+xlab('Correlations')
ggplot(null_TMT_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3)+ggtitle('nPOP SC (subset same cell# and inersected proteins with plex)') + xlab('Correlations')
ribo <- comps %>% filter(ComplexName == 'MCM complex')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
null_TMT_plusdat <-null_TMT
null_TMT_plusdat$cond <- 'NULL'
dist_tmt$cond <- 'MCM complex'
null_TMT_plusdat <- rbind(null_TMT_plusdat,dist_tmt)
null_plex_plusdat <-null_plex
null_plex_plusdat$cond <- 'NULL'
dist_plex$cond <- 'MCM complex'
null_plex_plusdat <- rbind(null_plex_plusdat,dist_plex)
ggplot(null_plex_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3) + ggtitle('plexDIA SC')+xlab('Correlations')
ggplot(null_TMT_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3)+ggtitle('nPOP SC (subset same cell# and inersected proteins with plex)') + xlab('Correlations')
ribo <- comps %>% filter(ComplexName == 'MCM complex')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo
ribo <- comps %>% filter(ComplexName == 'C complex spliceosome')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo
ribo <- comps %>% filter(ComplexName == 'C complex spliceosome')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
ribo <- comps %>% filter(ComplexName == 'MCM complex')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
dist_tmt <- Distance_cor(as.matrix(t7_ribo),10)
dist_plex <- Distance_cor(as.matrix(ribo_plex),10)
null_TMT_plusdat <-null_TMT
null_TMT_plusdat$cond <- 'NULL'
dist_tmt$cond <- 'MCM complex'
null_TMT_plusdat <- rbind(null_TMT_plusdat,dist_tmt)
null_plex_plusdat <-null_plex
null_plex_plusdat$cond <- 'NULL'
dist_plex$cond <- 'MCM complex'
null_plex_plusdat <- rbind(null_plex_plusdat,dist_plex)
ggplot(null_plex_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3) + ggtitle('plexDIA SC')+xlab('Correlations')
ggplot(null_TMT_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3)+ggtitle('nPOP SC (subset same cell# and inersected proteins with plex)') + xlab('Correlations')
View(t7_ribo)
ribo <- comps %>% filter(ComplexName == 'TNF-alpha/NF-kappa B signaling complex 6')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
dist_tmt <- Distance_cor(as.matrix(t7_ribo),10)
dist_plex <- Distance_cor(as.matrix(ribo_plex),10)
null_TMT_plusdat <-null_TMT
null_TMT_plusdat$cond <- 'NULL'
dist_tmt$cond <- 'TNF-alpha/NF-kappa B signaling complex 6'
null_TMT_plusdat <- rbind(null_TMT_plusdat,dist_tmt)
null_plex_plusdat <-null_plex
null_plex_plusdat$cond <- 'NULL'
dist_plex$cond <- 'TNF-alpha/NF-kappa B signaling complex 6'
null_plex_plusdat <- rbind(null_plex_plusdat,dist_plex)
ggplot(null_plex_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3) + ggtitle('plexDIA SC')+xlab('Correlations')
ggplot(null_TMT_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3)+ggtitle('nPOP SC (subset same cell# and inersected proteins with plex)') + xlab('Correlations')
ribo <- comps %>% filter(ComplexName == 'Kinase maturation complex 1')
ribo <-  unlist(str_split(ribo$subunits.UniProt.IDs.,';'))
ribo <- intersect(ribo,rownames(stuff))
ribo
ribo_plex <-stuff %>% filter(rownames(stuff)%in% ribo)
t7_ribo <- t7[,sample(colnames(t7),144)]
t7_ribo <- t7_ribo %>% filter(rownames(t7_ribo) %in% ribo)
dist_tmt <- Distance_cor(as.matrix(t7_ribo),10)
dist_plex <- Distance_cor(as.matrix(ribo_plex),10)
null_TMT_plusdat <-null_TMT
null_TMT_plusdat$cond <- 'NULL'
dist_tmt$cond <- 'Kinase maturation complex 1'
null_TMT_plusdat <- rbind(null_TMT_plusdat,dist_tmt)
null_plex_plusdat <-null_plex
null_plex_plusdat$cond <- 'NULL'
dist_plex$cond <- 'Kinase maturation complex 1'
null_plex_plusdat <- rbind(null_plex_plusdat,dist_plex)
ggplot(null_plex_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3) + ggtitle('plexDIA SC')+xlab('Correlations')
ggplot(null_TMT_plusdat,aes(x = value,fill = cond)) + geom_density(alpha=.3)+ggtitle('nPOP SC (subset same cell# and inersected proteins with plex)') + xlab('Correlations')
runApp('~/Downloads/DO-MS-master')
ref_channel<-2
# Add your cell type labels, must match those used in experimental design --> these are specified in annotation file
your_labels<-c("sc","neg")
your_control_label<-"neg"
ev<-read.delim("/Volumes/GoogleDrive/My Drive/MS/Collaborators/Senescence/nPOP_good/evidence.txt", header = TRUE)
unique(ev$Raw.file)
#Here just cleaning up protein names from the fasta to uniprot accession (may not be neccisary)
# Parse sp|Q00000|HUMAN_XXX into just Uniprot accession: Q00000
parse_row<-grep("|",ev$Leading.razor.protein, fixed=T)
if(length(parse_row)>0){
split_prot<-str_split(ev$Leading.razor.protein[parse_row], pattern = fixed("|"))
split_prot2<-unlist(split_prot)[seq(2,3*length(split_prot),3)]
ev$Leading.razor.protein[parse_row]<-split_prot2
}
parse_row<-grep("-",ev$Leading.razor.protein, fixed=T)
if(length(parse_row)>0){
split_prot<-str_split(ev$Leading.razor.protein[parse_row], pattern = fixed("-"))
split_prot2<-unlist(split_prot)[seq(1,2*length(split_prot),2)]
ev$Leading.razor.protein[parse_row]<-split_prot2
}
# Load experimental design and batches
design<-read.csv("/Users/andrewleduc/Desktop/GitHub/senescence/annotation_18plex.csv")
batch<-read.csv("/Users/andrewleduc/Desktop/GitHub/senescence/batch.csv")
# Attach batch data to protein data
ev[,colnames(batch)[-1]]<-NA
for(X in batch$set){
ev$lcbatch[ev$Raw.file==X] <- as.character(batch$lcbatch[batch$set%in%X])
ev$sortday[ev$Raw.file==X] <- as.character(batch$sortday[batch$set%in%X])
ev$digest[ev$Raw.file==X] <- as.character(batch$digest[batch$set%in%X])
}
ev$modseq<-paste0(ev$Modified.sequence,ev$Charge)
# Add X in front of experiment names because R doesn't like column names starting with numbers
ev$Raw.file<-paste0("X",ev$Raw.file)
design$Set<-paste0("X",design$Set)
# Which columns hold the TMT Reporter ion (RI) data
ri.index<-which(colnames(ev)%in%paste0("Reporter.intensity.",1:18))
# Make sure all runs are described in design, if not, print and remove them:
not.described<-unique(ev$Raw.file)[ !unique(ev$Raw.file) %in% paste0(design$Set) ]
ev<-ev[!ev$Raw.file%in%not.described,]
# Filter out reverse hits, contaminants, and contaminated spectra...
ev<-ev[-which(ev$Reverse=="+"),]
if(length(grep("REV", ev$Leading.razor.protein))>0){ ev<-ev[-grep("REV", ev$Leading.razor.protein),] }
if(length(grep("CON", ev$Leading.razor.protein))>0){ ev<-ev[-grep("CON", ev$Leading.razor.protein),] }
if(length(which(ev$Potential.contaminant=="+"))>0){ ev<-ev[-which(ev$Potential.contaminant=="+"),] }
ev<-ev[!is.na(ev$PIF),]
ev<-ev[ev$PIF>0.8,]
# Remove peptides that are more the 10% the intensity of the carrier in the single cell runs (only)
ev<-as.data.frame(ev)
ev$mrri<-0
ev$mrri <- rowMeans(ev[, ri.index[6:length(ri.index)]] / ev[, ri.index[1]], na.rm = T)
ev<-ev[ev$mrri < 0.02, ]
#ev <- ev %>% filter(Intensity > median(ev$Intensity,na.rm = T))
# Filter by PEP or FDR: CHOOSE ONE
# ev<-ev[ev$dart_PEP<0.02, ]
#ev<-ev[ev$PEP<0.02, ]
# ev<-ev[calc_fdr(ev$dart_PEP)<0.01, ]
ev<-ev[calc_fdr(ev$PEP)<0.01, ]
# Normalize single cell runs to normalization channel
ev<-as.data.frame(ev)
ev[, ri.index] <- ev[, ri.index] / ev[, ri.index[ref_channel]]
#Here is just some data wrangling so all appropriate annotations can be matched to single cells
# Organize data into a more convenient data structure:
# Create empty data frame
ev.melt<-melt(ev[0, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev)[ri.index]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"))
colnames(ev.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
# Record mapping of cell type to Channel:
ct.v<-c()
qt.v<-c()
# Create a unique ID string
unique.id.numeric<-1:length(ri.index)
unique.id<-paste0("i",unique.id.numeric)
RI_keep<-ri.index
ev <- ev %>% filter(is.na(Raw.file)==F)
# Give each sample a unique identifier
for(X in unique(ev$Raw.file)){
# Subset data by X'th experiment
ev.t<-ev[ev$Raw.file%in%X, ]
# Name the RI columns by what sample type they are: carrier, single cell, unused, etc...
colnames(ev.t)[ri.index]<-paste0(as.character(unlist(design[design$Set==X,-1])),"-", unique.id)
# Melt it! and combine with other experimental sets
ev.t.melt<-melt(ev.t[, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev.t)[RI_keep]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"));
# Record mapping of cell type to Channel:
ct.v<-c(ct.v, unique.id[which(ri.index%in%RI_keep)] )
qt.v<-c(qt.v, colnames(ev)[RI_keep] )
colnames(ev.t.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
ev.melt<-rbind(ev.melt, ev.t.melt)
# Update unique ID string
unique.id.numeric<-unique.id.numeric + length(ri.index)
unique.id<-paste0("i", unique.id.numeric)
}
c2q<-data.frame(ct.v, qt.v); colnames(c2q)<-c("id","channel")
c2q$id <- as.character(c2q$id )
# Grab the unique number associate to each and every cell, carrier channel, and empty channel
ev.melt$id<-unlist(strsplit(as.character(ev.melt$celltype),"-"))[seq(2,length(unlist(strsplit(as.character(ev.melt$celltype),"-"))),2)]
ev.melt$celltype<-unlist(strsplit(as.character(ev.melt$celltype),"-"))[seq(1,length(unlist(strsplit(as.character(ev.melt$celltype),"-"))),2)]
ev.melt$id<-as.factor(ev.melt$id)
# Remove duplicate observations of peptides from a single experiment
ev.melt<-remove.duplicates(ev.melt,c("sequence","id") )
ev.melt<-ev.melt[!is.na(ev.melt$protein), ]
# Create additional meta data matrices
ev.melt.uniqueID<-remove.duplicates(ev.melt,"id")
ev.melt.pep<-remove.duplicates(ev.melt, c("sequence","protein") )
# Create data frame of peptides x cells, populated by quantitation
ev.unmelt<-dcast(ev.melt, sequence ~ id, value.var = "quantitation", fill=NA)
# Also create matrix of same shape
ev.matrix<-as.matrix(ev.unmelt[,-1]); row.names(ev.matrix)<-ev.unmelt$sequence
# Replace all 0s with NA
ev.matrix[ev.matrix==0]<-NA
ev.matrix[ev.matrix==Inf]<-NA
ev.matrix[ev.matrix==-Inf]<-NA
# Divide matrix into single cells (including intentional blanks) and carriers
sc_cols<-unique(ev.melt$id[(ev.melt$celltype%in%c(your_labels))])
ev.matrix.sc<-ev.matrix[, colnames(ev.matrix)%in%sc_cols]
# This is Filter single cells,  Here we are commuting the agreement between peptides mapping to a protein
# For each protien with atleast 3 peptides we get a score, then the averge of that for all proteins is the
# value for each cell
sc.melt<-ev.melt
xd<-as_tibble( sc.melt )
xd <- xd %>% dplyr::group_by(id) %>% dplyr::mutate(med_per_c = median(quantitation, na.rm=T)); length(unique(xd$id))
length(unique(xd$id))
xd$quantitation[(xd$quantitation)==Inf]<-NA
xd$quantitation[(xd$quantitation)==0]<-NA
xd <- xd %>% dplyr::mutate_if(is.factor, as.character)
xd1 <- xd %>%
dplyr::group_by(id) %>%
dplyr::mutate(norm_q1 = quantitation / median(quantitation, na.rm=T))
xd2 <- xd1 %>%
dplyr::group_by(sequence, Raw.file) %>%
dplyr::mutate(norm_q = quantitation / median(norm_q1, na.rm=T))
xd3<- xd2 %>%
dplyr::filter(celltype%in%c(your_labels))
xd4<- xd3 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvq = cv(norm_q))
xd5<- xd4 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvn = cvna(norm_q))
xd6<- xd5 %>%
filter(cvn > 2)
xd7<-xd6 %>% group_by(id) %>% dplyr::mutate(cvm=median(cvq, na.rm=T))
xdf<-xd7
look <- xdf %>% filter(control == 'ctl')
look <- look %>% distinct(Raw.file,.keep_all = T)
#print("Number of unique proteins used in calculation:", length(unique(xdf$protein)))
median(xdf$cvm)
# Filter out variable wells and controls
cvPar <- 0.4
sc_kept<-unique( xdf$id[xdf$celltype!=your_control_label & xdf$cvm < cvPar])
sc0_kept<-unique( xdf$id[xdf$celltype==your_control_label & xdf$cvm > cvPar])
# Which wells to keep
keep_these<-unique( xdf$id)
sc_total<-unique( xdf$id[xdf$celltype!=your_control_label])
sc0_total<-unique( xdf$id[xdf$celltype==your_control_label])
scrate<-round(length(sc_kept) / length(sc_total),2)*100
ev.matrix.sc.f<-ev.matrix.sc[,colnames(ev.matrix.sc)%in%sc_kept]; dim(ev.matrix.sc.f)
ev.matrix.sc.f[ev.matrix.sc.f==Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==-Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==0]<-NA
xdf$control<-"sc"
xdf$control[xdf$celltype==your_control_label]<-"ctl"
my_col3<-c( "black", "purple2")
ggplot(data=xdf, aes(x=cvm,fill=control)) + geom_density(aes( alpha=0.5), adjust=4) + theme_pubr() +
scale_fill_manual(values=my_col3[c(1,2)]) +
xlab("Quantification variability") + ylab("Fraction of cells") + rremove("y.ticks") + rremove("y.text") +
font("xylab", size=30) +
font("x.text", size=20) +
coord_cartesian(xlim=c(.0,1))+
#xlim(c(-0.15, 0.35)) +
# annotate("text", x=0.27, y= 14, label=paste0(scrate,"% single cells passed"), size=8, color=my_col3[c(2)])+
# annotate("text", x=0.27, y= 12.5, label=paste0(sc0rate,"% control wells passed"), size=8, color=my_col3[c(1)])+
annotate("text", x=0.26, y= 14, label=paste0(length(sc_kept),"cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.64, y= 12, label=paste0(length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
annotate("text", x=0.63, y= 14, label=paste0(length(sc_total) -length(sc_kept)," cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.245, y= 12, label=paste0(length(sc0_total) - length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
#annotate("text", x=0.25, y= 3, label="Macrophage-like", size=6) +
rremove("legend") + geom_vline(xintercept=0.42, lty=2, size=2, color="gray50") + theme(plot.margin = margin(0, 1, 0, 0, "cm"))
ev<-read.delim("/Volumes/GoogleDrive/My Drive/MS/Collaborators/Senescence/nPOP_good/evidence.txt", header = TRUE)
#ev<-read.delim('/Volumes/GoogleDrive/My Drive/MS/Collaborators/Senescence/CHK_MOUSE_mPOP/evidence.txt')
unique(ev$Raw.file)
parse_row<-grep("|",ev$Leading.razor.protein, fixed=T)
if(length(parse_row)>0){
split_prot<-str_split(ev$Leading.razor.protein[parse_row], pattern = fixed("|"))
split_prot2<-unlist(split_prot)[seq(2,3*length(split_prot),3)]
ev$Leading.razor.protein[parse_row]<-split_prot2
}
parse_row<-grep("-",ev$Leading.razor.protein, fixed=T)
if(length(parse_row)>0){
split_prot<-str_split(ev$Leading.razor.protein[parse_row], pattern = fixed("-"))
split_prot2<-unlist(split_prot)[seq(1,2*length(split_prot),2)]
ev$Leading.razor.protein[parse_row]<-split_prot2
}
# Load experimental design and batches
design<-read.csv("/Users/andrewleduc/Desktop/GitHub/senescence/annotation_18plex.csv")
batch<-read.csv("/Users/andrewleduc/Desktop/GitHub/senescence/batch.csv")
ev[,colnames(batch)[-1]]<-NA
for(X in batch$set){
ev$lcbatch[ev$Raw.file==X] <- as.character(batch$lcbatch[batch$set%in%X])
ev$sortday[ev$Raw.file==X] <- as.character(batch$sortday[batch$set%in%X])
ev$digest[ev$Raw.file==X] <- as.character(batch$digest[batch$set%in%X])
}
ev$modseq<-paste0(ev$Modified.sequence,ev$Charge)
# Add X in front of experiment names because R doesn't like column names starting with numbers
ev$Raw.file<-paste0("X",ev$Raw.file)
design$Set<-paste0("X",design$Set)
# Which columns hold the TMT Reporter ion (RI) data
ri.index<-which(colnames(ev)%in%paste0("Reporter.intensity.",1:18))
# Make sure all runs are described in design, if not, print and remove them:
not.described<-unique(ev$Raw.file)[ !unique(ev$Raw.file) %in% paste0(design$Set) ]
not.described
ev<-ev[!ev$Raw.file%in%not.described,]
# Filter out reverse hits, contaminants, and contaminated spectra...
ev<-ev[-which(ev$Reverse=="+"),]
if(length(grep("REV", ev$Leading.razor.protein))>0){ ev<-ev[-grep("REV", ev$Leading.razor.protein),] }
if(length(grep("CON", ev$Leading.razor.protein))>0){ ev<-ev[-grep("CON", ev$Leading.razor.protein),] }
if(length(which(ev$Potential.contaminant=="+"))>0){ ev<-ev[-which(ev$Potential.contaminant=="+"),] }
ev<-ev[!is.na(ev$PIF),]
ev<-ev[ev$PIF>0.8,]
# Remove peptides that are more the 10% the intensity of the carrier in the single cell runs (only)
ev<-as.data.frame(ev)
ev$mrri<-0
ev$mrri <- rowMeans(ev[, ri.index[6:length(ri.index)]] / ev[, ri.index[1]], na.rm = T)
ev<-ev[ev$mrri < 0.05, ]
# ev<-ev[ev$dart_PEP<0.02, ]
#ev<-ev[ev$PEP<0.02, ]
# ev<-ev[calc_fdr(ev$dart_PEP)<0.01, ]
ev<-ev[calc_fdr(ev$PEP)<0.01, ]
source("functions_parameters.R")
# ev<-ev[ev$dart_PEP<0.02, ]
#ev<-ev[ev$PEP<0.02, ]
# ev<-ev[calc_fdr(ev$dart_PEP)<0.01, ]
ev<-ev[calc_fdr(ev$PEP)<0.01, ]
# ev<-ev[ev$dart_PEP<0.02, ]
ev<-ev[ev$PEP<0.03, ]
ev<-as.data.frame(ev)
ev[, ri.index] <- ev[, ri.index] / ev[, ri.index[ref_channel]]
ev.melt<-melt(ev[0, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev)[ri.index]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"))
colnames(ev.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
ct.v<-c()
qt.v<-c()
# Create a unique ID string
unique.id.numeric<-1:length(ri.index)
unique.id<-paste0("i",unique.id.numeric)
RI_keep<-ri.index
ev <- ev %>% filter(is.na(Raw.file)==F)
# Give each sample a unique identifier
for(X in unique(ev$Raw.file)){
# Subset data by X'th experiment
ev.t<-ev[ev$Raw.file%in%X, ]
# Name the RI columns by what sample type they are: carrier, single cell, unused, etc...
colnames(ev.t)[ri.index]<-paste0(as.character(unlist(design[design$Set==X,-1])),"-", unique.id)
# Melt it! and combine with other experimental sets
ev.t.melt<-melt(ev.t[, c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest", colnames(ev.t)[RI_keep]) ],
id.vars = c("Raw.file","modseq","Leading.razor.protein","lcbatch","sortday","digest"));
# Record mapping of cell type to Channel:
ct.v<-c(ct.v, unique.id[which(ri.index%in%RI_keep)] )
qt.v<-c(qt.v, colnames(ev)[RI_keep] )
colnames(ev.t.melt)<-c("Raw.file","sequence","protein","lcbatch","sortday","digest","celltype","quantitation")
ev.melt<-rbind(ev.melt, ev.t.melt)
# Update unique ID string
unique.id.numeric<-unique.id.numeric + length(ri.index)
unique.id<-paste0("i", unique.id.numeric)
}
c2q<-data.frame(ct.v, qt.v); colnames(c2q)<-c("id","channel")
c2q$id <- as.character(c2q$id )
ev.melt$id<-unlist(strsplit(as.character(ev.melt$celltype),"-"))[seq(2,length(unlist(strsplit(as.character(ev.melt$celltype),"-"))),2)]
ev.melt$celltype<-unlist(strsplit(as.character(ev.melt$celltype),"-"))[seq(1,length(unlist(strsplit(as.character(ev.melt$celltype),"-"))),2)]
ev.melt$id<-as.factor(ev.melt$id)
# Remove duplicate observations of peptides from a single experiment
ev.melt<-remove.duplicates(ev.melt,c("sequence","id") )
ev.melt<-ev.melt[!is.na(ev.melt$protein), ]
# Create additional meta data matrices
ev.melt.uniqueID<-remove.duplicates(ev.melt,"id")
ev.melt.pep<-remove.duplicates(ev.melt, c("sequence","protein") )
# Create data frame of peptides x cells, populated by quantitation
ev.unmelt<-dcast(ev.melt, sequence ~ id, value.var = "quantitation", fill=NA)
# Also create matrix of same shape
ev.matrix<-as.matrix(ev.unmelt[,-1]); row.names(ev.matrix)<-ev.unmelt$sequence
# Replace all 0s with NA
ev.matrix[ev.matrix==0]<-NA
ev.matrix[ev.matrix==Inf]<-NA
ev.matrix[ev.matrix==-Inf]<-NA
# Divide matrix into single cells (including intentional blanks) and carriers
sc_cols<-unique(ev.melt$id[(ev.melt$celltype%in%c(your_labels))])
ev.matrix.sc<-ev.matrix[, colnames(ev.matrix)%in%sc_cols]
# This is Filter single cells,  Here we are commuting the agreement between peptides mapping to a protein
# For each protien with atleast 3 peptides we get a score, then the averge of that for all proteins is the
# value for each cell
sc.melt<-ev.melt
xd<-as_tibble( sc.melt )
xd <- xd %>% dplyr::group_by(id) %>% dplyr::mutate(med_per_c = median(quantitation, na.rm=T)); length(unique(xd$id))
length(unique(xd$id))
xd$quantitation[(xd$quantitation)==Inf]<-NA
xd$quantitation[(xd$quantitation)==0]<-NA
xd <- xd %>% dplyr::mutate_if(is.factor, as.character)
xd1 <- xd %>%
dplyr::group_by(id) %>%
dplyr::mutate(norm_q1 = quantitation / median(quantitation, na.rm=T))
xd2 <- xd1 %>%
dplyr::group_by(sequence, Raw.file) %>%
dplyr::mutate(norm_q = quantitation / median(norm_q1, na.rm=T))
xd3<- xd2 %>%
dplyr::filter(celltype%in%c(your_labels))
xd4<- xd3 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvq = cv(norm_q))
xd5<- xd4 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvn = cvna(norm_q))
xd6<- xd5 %>%
filter(cvn > 2)
xd7<-xd6 %>% group_by(id) %>% dplyr::mutate(cvm=median(cvq, na.rm=T))
xdf<-xd7
look <- xdf %>% filter(control == 'ctl')
look <- look %>% distinct(Raw.file,.keep_all = T)
#print("Number of unique proteins used in calculation:", length(unique(xdf$protein)))
median(xdf$cvm)
# Filter out variable wells and controls
cvPar <- 0.4
sc_kept<-unique( xdf$id[xdf$celltype!=your_control_label & xdf$cvm < cvPar])
sc0_kept<-unique( xdf$id[xdf$celltype==your_control_label & xdf$cvm > cvPar])
# Which wells to keep
keep_these<-unique( xdf$id)
sc_total<-unique( xdf$id[xdf$celltype!=your_control_label])
sc0_total<-unique( xdf$id[xdf$celltype==your_control_label])
scrate<-round(length(sc_kept) / length(sc_total),2)*100
ev.matrix.sc.f<-ev.matrix.sc[,colnames(ev.matrix.sc)%in%sc_kept]; dim(ev.matrix.sc.f)
ev.matrix.sc.f[ev.matrix.sc.f==Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==-Inf]<-NA
ev.matrix.sc.f[ev.matrix.sc.f==0]<-NA
xdf$control<-"sc"
xdf$control[xdf$celltype==your_control_label]<-"ctl"
my_col3<-c( "black", "purple2")
ggplot(data=xdf, aes(x=cvm,fill=control)) + geom_density(aes( alpha=0.5), adjust=4) + theme_pubr() +
scale_fill_manual(values=my_col3[c(1,2)]) +
xlab("Quantification variability") + ylab("Fraction of cells") + rremove("y.ticks") + rremove("y.text") +
font("xylab", size=30) +
font("x.text", size=20) +
coord_cartesian(xlim=c(.0,1))+
#xlim(c(-0.15, 0.35)) +
# annotate("text", x=0.27, y= 14, label=paste0(scrate,"% single cells passed"), size=8, color=my_col3[c(2)])+
# annotate("text", x=0.27, y= 12.5, label=paste0(sc0rate,"% control wells passed"), size=8, color=my_col3[c(1)])+
annotate("text", x=0.26, y= 14, label=paste0(length(sc_kept),"cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.64, y= 12, label=paste0(length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
annotate("text", x=0.63, y= 14, label=paste0(length(sc_total) -length(sc_kept)," cells"), size=10, color=my_col3[c(2)])+
annotate("text", x=0.245, y= 12, label=paste0(length(sc0_total) - length(sc0_kept)," Ctr -"), size=10, color=my_col3[c(1)])+
#annotate("text", x=0.25, y= 3, label="Macrophage-like", size=6) +
rremove("legend") + geom_vline(xintercept=0.42, lty=2, size=2, color="gray50") + theme(plot.margin = margin(0, 1, 0, 0, "cm"))
# Data transformations ----------------------------------------------------
# matrix is now peptide(rows) x single cell(columns)
## So first the data is normalized by the reference, then we divide each column (a single cell) by median
#this normalize
sc.melt<-ev.melt
xd<-as_tibble( sc.melt )
xd <- xd %>% dplyr::group_by(id) %>% dplyr::mutate(med_per_c = median(quantitation, na.rm=T)); length(unique(xd$id))
length(unique(xd$id))
xd$quantitation[(xd$quantitation)==Inf]<-NA
xd$quantitation[(xd$quantitation)==0]<-NA
xd <- xd %>% dplyr::mutate_if(is.factor, as.character)
xd1 <- xd %>%
dplyr::group_by(id) %>%
dplyr::mutate(norm_q1 = quantitation / median(quantitation, na.rm=T))
xd2 <- xd1 %>%
dplyr::group_by(sequence, Raw.file) %>%
dplyr::mutate(norm_q = quantitation / median(norm_q1, na.rm=T))
your_labels
xd3<- xd2 %>%
dplyr::filter(celltype%in%c(your_labels))
xd4<- xd3 %>%
dplyr::group_by(protein, id) %>%
dplyr::mutate(cvq = cv(norm_q))
